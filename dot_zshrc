# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load
ZSH_THEME=""

# Standard plugins can be found in $ZSH/plugins/
plugins=(
    z
    command-not-found
    git
    nvm
    rust
    zoxide
)

# must be sourced after plugins
source $ZSH/oh-my-zsh.sh

export COLORTERM="truecolor"
export EDITOR="vim -f"
export VISUAL="nvim"
export PAGER="bat -p"
export MANPAGER="sh -c 'col -bx | bat -l man -p'"

alias cd="z"
alias vi="nvim"
alias ls="exa"
alias ll="exa -1lbF --git --icons" # long list
alias la="exa -1lbhHUma --time-style=long-iso --git --color-scale --icons" # all list
alias lt="exa --tree --level=2" # tree
alias help="run-help"

function code() {
    local code_path="/mnt/c/Users/olleg/AppData/Local/Programs/Microsoft VS Code/Code.exe"
    "$code_path" --remote wsl+Ubuntu -n "$(pwd)"
}

# Man page with examples
function tldr() {
    command tldr -m "$1" | glow -p -;
}

function nvim_man() {
    nvim "+Man $* | only";
}

function explorer() {
    /mnt/c/Windows/explorer.exe $(wslpath -w "$1")
}

# Setup thefuck
eval $(thefuck --alias)

# ===============================
# 		       nnn
# ===============================
n ()
{
    export NNN_FIFO="/tmp/nnn.fifo"
    export NNN_FCOLORS="0000E6310000000000000000"
    export NNN_PLUG="p:preview-tui;a:autojump"
    export NNN_OPENER="~/.config/nnn/plugins/nuke"

    # Block nesting of nnn in subshells
    if [ -n $NNNLVL ] && [ "${NNNLVL:-0}" -ge 1 ]; then
        echo "nnn is already running"
        return
    fi

    # The behaviour is set to cd on quit (nnn checks if NNN_TMPFILE is set)
    # To cd on quit only on ^G, either remove the "export" as in:
    #    NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
    #    (or, to a custom path: NNN_TMPFILE=/tmp/.lastd)
    # or, export NNN_TMPFILE after nnn invocation
    export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

    # Unmask ^Q (, ^V etc.) (if required, see `stty -a`) to Quit nnn
    # stty start undef
    # stty stop undef
    # stty lwrap undef
    # stty lnext undef

    # if [ -n "$TMUX" ]; then
    #     nnn -e $@
    # else
    #     tmux new-session "nnn -e $@"
    # fi
    nnn -e $@

    if [ -f "$NNN_TMPFILE" ]; then
            . "$NNN_TMPFILE"
            rm -f "$NNN_TMPFILE" > /dev/null
    fi
}

# ===============================
# 	     	custom open
# ===============================
wopen ()
{
    fullname=$1
    extension="${fullname##*.}"
    filename="${fullname%.*}"

    case "$extension" in
        md) glow -p "$fullname" ;;
        html) explorer.exe "$fullname" ;;
        jpg|png) xdg-open "$fullname" ;;
        *) echo "Not supported: $extension" ;;
    esac
}

# ===============================
#        more nvim configs
# ===============================
alias nvim-lazy="NVIM_APPNAME=LazyVim nvim"
alias nvim-kick="NVIM_APPNAME=kickstart nvim"
alias nvim-chad="NVIM_APPNAME=NvChad nvim"
alias nvim-mvim="NVIM_APPNAME=mvim nvim"

function nvims() {
  items=("default" "kickstart" "LazyVim" "NvChad" "mvim")
  config=$(printf "%s\n" "${items[@]}" | fzf --prompt=" Neovim Config  " --height=50% --layout=reverse --border --exit-0)
  if [[ -z $config ]]; then
    echo "Nothing selected"
    return 0
  elif [[ $config == "default" ]]; then
    config=""
  fi
  NVIM_APPNAME=$config nvim $@
}
# bindkey -s ^a "nvims\n"

# Set X11 as X Server
export DISPLAY=:0

# Starship
eval "$(starship init zsh)"

# NPM version manager
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

[ -f "/home/olleg/.ghcup/env" ] && source "/home/olleg/.ghcup/env" # ghcup-env
